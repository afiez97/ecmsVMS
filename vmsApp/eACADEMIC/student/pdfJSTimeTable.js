$(function () {
    $.ajaxSetup({
        cache: false,
    });

});


function agreementStd(fk_aca_cal, year, cohort) {
    let datapush = [];

    var doc = new jsPDF("landscape");


    stud_name = stud_nameGet;
    studId = window.sessionStorage.std_studentid;
    icnum = sti_icnoGet;
    pgm = pgm_idGet + ' - ' + pgm_nameGet;

    year = year.replace('/', '');
    aca_session = fk_aca_cal;
    // cohort = cohort;
    console.log(cohort);
    // Load the image
    getBase64Image('images/ucmipicoms.png', function (imgLogo) {


        var width = doc.internal.pageSize.getWidth();
        // alert(width);
        var height = doc.internal.pageSize.getHeight();

        // Add the image to the PDF
        doc.addImage(imgLogo, "png", 0, 0, width, height);



        doc.setFontSize(15);
        doc.setFont("helvetica", "bold");
        doc.text('                                                            VARIABLE MOVE SOLUTION'.toUpperCase(), 14, 23);

        doc.setFontSize(15);
        doc.setFont("helvetica", "bold");
        doc.text('COURSE REGISTRATION SLIP'.toUpperCase(), 130, 28);

        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text('STUDENT NAME              : ' + stud_name.toUpperCase(), 14, 40);

        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text('STUDENT ID                     : ' + studId.toUpperCase(), 14, 45);

        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text('NRIC/PASSPORT NO.      : ' + icnum.toUpperCase(), 14, 50);

        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text('ACADEMIC SESSION       : ' + year + '/' + cohort, 150, 40);

        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text('PROGRAM                        : ', 150, 45);


        doc.setFontSize(10);
        doc.setFont("helvetica", "bold");
        doc.text(pgm.toUpperCase(), 195, 45, { maxWidth: 80 });

        // setTimeout(() => {
        // }, 1000);


        loadTimeTable(studId, aca_session, function () {
            if (obj_tmtDet.success) {
                let disLect = [];
                let bilCrs = 1;
                $.each(obj_tmtDet.data, function (i, field) {

                    let lect_name = field.lecturer_name;
                    if (lect_name != null) {
                        disLect = lect_name.split(" ");
                        disLect2 = lect_name;
                    }
                    else {
                        disLect2 = "-";
                    }

                    datapush.push([

                        bilCrs++,
                        field.crs_code,
                        field.course_name,
                        field.crs_credit,
                        disLect2,
                    ]

                    );




                });
                let wantedTableWidth = 230;

                let pageWidth = doc.internal.pageSize.width;
                let margin = (pageWidth - wantedTableWidth) / 2;
                
                
                doc.autoTable({
                    // startX: 30,
                    startY: 58,
                    tableWidth: doc.internal.pageSize.getWidth(),
                    margin: { left: margin, bottom: margin },
                    head: [
                        ['Bil', 'Course Code', 'Course Name', 'Credit', 'Lecturer Name'],
                    ],
                    columnStyles: {
                        // Set the width for each column (index-based)
                        0: { columnWidth: 15 },   // Day column
                        1: { columnWidth: 40 },   // 8AM-9AM column
                        2: { columnWidth: 80 },   // 9AM-10AM column
                        3: { columnWidth: 20 },   // 10AM-11AM column
                        4: { columnWidth: 80 },   // 10AM-11AM column
                    },

                    styles: {
                        fontSize: 10,
                        cellPadding: 2,
                        fillColor: [0, 0, 0, 0],
                        // Transparent fill color (RGBA)
                        textColor: [0, 0, 0],         // Black text color
                        lineWidth: 0.1,              // Border width (set to 0 for no border)
                        lineColor: [0, 0, 0]         // Black border color
                    },
                    body: datapush,
                });

                var dateToday = (new Date().toDateString()).split(' ');

                text1 =
                    `This timetable is generated by eCMS on : ` + dateToday[2] + ' ' + dateToday[1] + ' ' + dateToday[3] +

                    '\n' +
                    '\n' +
                    '\n' +
                    `                                                                             Mentor's Signature                                                              Student's Signature \n\n\n\n` +
                    '                                               ______________________________________________                       ___________________________';



                var textYPosition = doc.autoTable.previous.finalY + 5;

                doc.setFontSize(10);
                doc.setFont("helvetica", "bold");
                doc.text('' + text1, 14, textYPosition);


                // Get the data URL of the PDF
                var pdfDataUri = doc.output('datauristring');

                // Open the PDF in a new tab
                openPDFInNewTab(pdfDataUri);
            }
        });

    });

}



// Function to convert image to base64
function getBase64Image(imgUrl, callback) {
    var img = new Image();
    img.crossOrigin = 'Anonymous';
    img.onload = function () {
        var canvas = document.createElement("canvas");
        canvas.width = this.width;
        canvas.height = this.height;

        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0);

        var dataURL = canvas.toDataURL("image/png");
        callback(dataURL);
    };
    img.src = imgUrl;
}


function loadTimeTable(studID, aca_session, returnValue) {
    // function StudentTimetable(lect, acaCal, course, returnValue){

    var form = new FormData();
    // form.append("fk_lecturer", lect);
    // form.append("fk_acaCal", acaCal);
    // form.append("fk_course", course);
    form.append("studID", studID);
    form.append("aca_session", aca_session);

    var settings = {
        url: host + "api_timetbl_picoms/public/misTimetblDet/agreementStd",
        method: "POST",
        timeout: 0,
        headers: {
            Authorization: "picoms " + window.sessionStorage.token,
        },
        processData: false,
        mimeType: "multipart/form-data",
        contentType: false,
        data: form,
    };

    $.ajax(settings).done(function (response) {
        obj_tmtDet = JSON.parse(response);
        returnValue();
    });
}

var newTab = null; // Declare newTab variable outside the function scope


function openPDFInNewTab(pdfDataUri) {
    // Check if a new tab is already opened
    if (newTab && !newTab.closed) {
        // If a new tab is already opened, set its location to the PDF data URI
        newTab.location.href = pdfDataUri;
    } else {
        // Convert data URI to Blob
        var byteCharacters = atob(pdfDataUri.split(',')[1]);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: 'application/pdf' });

        // Create a URL for the Blob
        var blobUrl = URL.createObjectURL(blob);

        // Open the PDF in a new tab
        newTab = window.open(blobUrl);
        if (!newTab) {
            // If pop-up is blocked, show an alert to the user
            alert('Pop-up blocked. Please check your browser settings.');
        } else {
            // If new tab is successfully opened, close the current page
            window.close();
        }
    }
}